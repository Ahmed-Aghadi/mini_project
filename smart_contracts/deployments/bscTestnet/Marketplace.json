{
  "address": "0xB20CDCaF8636Efee0730Ac5fe37842afA13909e6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eth_usd_priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mapAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "utilsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AuctioNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionCantBeBought",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AuctionOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BidNotHighEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidListing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidListingId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoBids",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotHighestBidder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotListingOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "USDNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "USDNotSupportedForAuction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValidListing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "auctionBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "buyListing",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "calculateWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "inUSD",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAuction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "auctionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "amount",
          "type": "uint96"
        }
      ],
      "name": "createListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "deleteListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eth_usd_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "highestBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_link",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_registry",
      "outputs": [
        {
          "internalType": "contract AutomationRegistryInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "invalidateAuctionBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        }
      ],
      "name": "isListingValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listingCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listingToUpkeepID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "inUSD",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAuction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "aucionTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x586d1f3f4822a9c821d0fbbe9aa12dc47d456e77562070d1e6ff009580f62494",
  "receipt": {
    "to": null,
    "from": "0x0de82DCC40B8468639251b089f8b4A4400022e04",
    "contractAddress": "0xB20CDCaF8636Efee0730Ac5fe37842afA13909e6",
    "transactionIndex": 6,
    "gasUsed": "2306525",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x971e294162ed59024a8d00d889efe35f3f65e94c76b7e62c8ea4a745a813358a",
    "transactionHash": "0x586d1f3f4822a9c821d0fbbe9aa12dc47d456e77562070d1e6ff009580f62494",
    "logs": [],
    "blockNumber": 33053763,
    "cumulativeGasUsed": "2603117",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x9574E60E8aBeb8062CD3DCC3ed7714E067768a72",
    "0x2e4dDe518EB8B63C47D388aa129386d9ca110a45",
    "0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06",
    "0x57A4a13b35d25EE78e084168aBaC5ad360252467",
    "0xE16Df59B887e3Caa439E0b29B42bA2e7976FD8b2",
    999999,
    "0xC07DdbA94611C33882612b8031b2a6AfB65ca545"
  ],
  "numDeployments": 1,
  "solcInputHash": "9306ec064d8c5c43567858729ec356e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eth_usd_priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"utilsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AuctioNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionCantBeBought\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidNotHighEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidListing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidListingId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBids\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotHighestBidder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotListingOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USDNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"USDNotSupportedForAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidListing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"buyListing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"calculateWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inUSD\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"deleteListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_usd_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_link\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_registry\",\"outputs\":[{\"internalType\":\"contract AutomationRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"invalidateAuctionBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"name\":\"isListingValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listingToUpkeepID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"inUSD\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"aucionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Marketplace.sol\":\"Marketplace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":chainlink/=lib/chainlink-brownie-contracts/contracts/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AutomationRegistryInterface1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice config of the registry\\n * @dev only used in params and return values\\n * @member paymentPremiumPPB payment premium rate oracles receive on top of\\n * being reimbursed for gas, measured in parts per billion\\n * @member flatFeeMicroLink flat fee paid to oracles for performing upkeeps,\\n * priced in MicroLink; can be used in conjunction with or independently of\\n * paymentPremiumPPB\\n * @member blockCountPerTurn number of blocks each oracle has during their turn to\\n * perform upkeep before it will be the next keeper's turn to submit\\n * @member checkGasLimit gas limit when checking for upkeep\\n * @member stalenessSeconds number of seconds that is allowed for feed data to\\n * be stale before switching to the fallback pricing\\n * @member gasCeilingMultiplier multiplier to apply to the fast gas feed price\\n * when calculating the payment ceiling for keepers\\n * @member minUpkeepSpend minimum LINK that an upkeep must spend before cancelling\\n * @member maxPerformGas max executeGas allowed for an upkeep on this registry\\n * @member fallbackGasPrice gas price used if the gas price feed is stale\\n * @member fallbackLinkPrice LINK price used if the LINK price feed is stale\\n * @member transcoder address of the transcoder contract\\n * @member registrar address of the registrar contract\\n */\\nstruct Config {\\n  uint32 paymentPremiumPPB;\\n  uint32 flatFeeMicroLink; // min 0.000001 LINK, max 4294 LINK\\n  uint24 blockCountPerTurn;\\n  uint32 checkGasLimit;\\n  uint24 stalenessSeconds;\\n  uint16 gasCeilingMultiplier;\\n  uint96 minUpkeepSpend;\\n  uint32 maxPerformGas;\\n  uint256 fallbackGasPrice;\\n  uint256 fallbackLinkPrice;\\n  address transcoder;\\n  address registrar;\\n}\\n\\n/**\\n * @notice state of the registry\\n * @dev only used in params and return values\\n * @member nonce used for ID generation\\n * @member ownerLinkBalance withdrawable balance of LINK by contract owner\\n * @member expectedLinkBalance the expected balance of LINK of the registry\\n * @member numUpkeeps total number of upkeeps on the registry\\n */\\nstruct State {\\n  uint32 nonce;\\n  uint96 ownerLinkBalance;\\n  uint256 expectedLinkBalance;\\n  uint256 numUpkeeps;\\n}\\n\\ninterface AutomationRegistryBaseInterface {\\n  function registerUpkeep(\\n    address target,\\n    uint32 gasLimit,\\n    address admin,\\n    bytes calldata checkData\\n  ) external returns (uint256 id);\\n\\n  function performUpkeep(uint256 id, bytes calldata performData) external returns (bool success);\\n\\n  function cancelUpkeep(uint256 id) external;\\n\\n  function addFunds(uint256 id, uint96 amount) external;\\n\\n  function setUpkeepGasLimit(uint256 id, uint32 gasLimit) external;\\n\\n  function getUpkeep(uint256 id)\\n    external\\n    view\\n    returns (\\n      address target,\\n      uint32 executeGas,\\n      bytes memory checkData,\\n      uint96 balance,\\n      address lastKeeper,\\n      address admin,\\n      uint64 maxValidBlocknumber,\\n      uint96 amountSpent\\n    );\\n\\n  function getActiveUpkeepIDs(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  function getKeeperInfo(address query)\\n    external\\n    view\\n    returns (\\n      address payee,\\n      bool active,\\n      uint96 balance\\n    );\\n\\n  function getState()\\n    external\\n    view\\n    returns (\\n      State memory,\\n      Config memory,\\n      address[] memory\\n    );\\n}\\n\\n/**\\n * @dev The view methods are not actually marked as view in the implementation\\n * but we want them to be easily queried off-chain. Solidity will not compile\\n * if we actually inherit from this interface, so we document it here.\\n */\\ninterface AutomationRegistryInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    view\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      int256 gasWei,\\n      int256 linkEth\\n    );\\n}\\n\\ninterface AutomationRegistryExecutableInterface is AutomationRegistryBaseInterface {\\n  function checkUpkeep(uint256 upkeepId, address from)\\n    external\\n    returns (\\n      bytes memory performData,\\n      uint256 maxLinkPayment,\\n      uint256 gasLimit,\\n      uint256 adjustedGasWei,\\n      uint256 linkEth\\n    );\\n}\\n\",\"keccak256\":\"0xc61d747194f2efd476204f9cf138f4028166d4723960fd66c7d316625ebe3ff6\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/KeeperRegistryInterface1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationRegistryInterface1_2 directly.\\n */\\npragma solidity ^0.8.0;\\nimport {Config, State} from \\\"./AutomationRegistryInterface1_2.sol\\\";\\nimport {AutomationRegistryBaseInterface as KeeperRegistryBaseInterface} from \\\"./AutomationRegistryInterface1_2.sol\\\";\\nimport {AutomationRegistryInterface as KeeperRegistryInterface} from \\\"./AutomationRegistryInterface1_2.sol\\\";\\nimport {AutomationRegistryExecutableInterface as KeeperRegistryExecutableInterface} from \\\"./AutomationRegistryInterface1_2.sol\\\";\\n\",\"keccak256\":\"0x7b57ca80b9f55709c69e50b64942193ab904f9b73c4e3f8376ca2303f171806b\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/solmate/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x00502c7d7671d9dce495858572943999633ac298f20dbb70476280a93720d412\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Efficient library for creating string representations of integers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solady (https://github.com/Vectorized/solady/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) return toString(uint256(value));\\n\\n        unchecked {\\n            str = toString(uint256(-value));\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Note: This is only safe because we over-allocate memory\\n                // and write the string from right to left in toString(uint256),\\n                // and thus can be sure that sub(str, 1) is an unused memory location.\\n\\n                let length := mload(str) // Load the string length.\\n                // Put the - character at the start of the string contents.\\n                mstore(str, 45) // 45 is the ASCII code for the - character.\\n                str := sub(str, 1) // Move back the string pointer by a byte.\\n                mstore(str, add(length, 1)) // Update the string length.\\n            }\\n        }\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but we allocate 160 bytes\\n            // to keep the free memory pointer word aligned. We'll need 1 word for the length, 1 word for the\\n            // trailing zeros padding, and 3 other words for a max of 78 digits. In total: 5 * 32 = 160 bytes.\\n            let newFreeMemoryPointer := add(mload(0x40), 160)\\n\\n            // Update the free memory pointer to avoid overriding our string.\\n            mstore(0x40, newFreeMemoryPointer)\\n\\n            // Assign str to the end of the zone of newly allocated memory.\\n            str := sub(newFreeMemoryPointer, 32)\\n\\n            // Clean the last word of memory it may not be overwritten.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                // Move the pointer 1 byte to the left.\\n                str := sub(str, 1)\\n\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n\\n                // Keep dividing temp until zero.\\n                temp := div(temp, 10)\\n\\n                 // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute and cache the final total length of the string.\\n            let length := sub(end, str)\\n\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 32)\\n\\n            // Store the string's length at the start of memory allocated for our string.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5129243d01d1ff65ee34aed11660bf13f01964f481664c96676877df70f32909\",\"license\":\"MIT\"},\"src/Marketplace.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {ERC1155TokenReceiver} from \\\"solmate/tokens/ERC1155.sol\\\";\\nimport \\\"openzeppelin/token/ERC1155/IERC1155.sol\\\";\\nimport {ERC721TokenReceiver} from \\\"solmate/tokens/ERC721.sol\\\";\\nimport \\\"openzeppelin/token/ERC721/IERC721.sol\\\";\\nimport \\\"solmate/utils/LibString.sol\\\";\\nimport \\\"chainlink/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {KeeperRegistryInterface, State, Config} from \\\"chainlink/v0.8/interfaces/KeeperRegistryInterface1_2.sol\\\";\\nimport {LinkTokenInterface} from \\\"chainlink/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"chainlink/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"openzeppelin/metatx/ERC2771Context.sol\\\";\\n\\ninterface KeeperRegistrarInterface {\\n    function register(\\n        string memory name,\\n        bytes calldata encryptedEmail,\\n        address upkeepContract,\\n        uint32 gasLimit,\\n        address adminAddress,\\n        bytes calldata checkData,\\n        uint96 amount,\\n        uint8 source,\\n        address sender\\n    ) external;\\n}\\n\\ncontract Marketplace is ERC2771Context {\\n    error USDNotSupported();\\n    error AuctioNotSupported();\\n    error InvalidTokenId();\\n    error InvalidListingId();\\n    error InvalidListing();\\n    error ValidListing();\\n    error InvalidPrice();\\n    error NotTokenOwner();\\n    error NotListingOwner();\\n    error NotEnoughFunds();\\n    error NotAuction();\\n    error NoBids();\\n    error BidNotHighEnough();\\n    error AuctionNotOver();\\n    error AuctionOver();\\n    error USDNotSupportedForAuction();\\n    error AuctionCantBeBought();\\n    error NotHighestBidder();\\n    struct Listing {\\n        address seller;\\n        bool inUSD;\\n        uint256 tokenId;\\n        uint256 price;\\n        uint256 timestamp;\\n        bool isValid;\\n        bool isAuction;\\n        uint256 aucionTime;\\n    }\\n    struct Bid {\\n        address bidder;\\n        uint256 amount;\\n    }\\n    AggregatorV3Interface public immutable eth_usd_priceFeed;\\n    IERC721 internal map;\\n    IERC1155 internal utils;\\n    uint public listingCount = 0;\\n\\n    mapping(uint256 => Listing) public listings;\\n    mapping(address => uint256) public balances;\\n    mapping(uint256 => Bid) public highestBid;\\n    mapping(address => uint256) public auctionBalance;\\n    mapping(uint256 => uint256) public listingToUpkeepID;\\n\\n    LinkTokenInterface public immutable i_link;\\n    address public immutable registrar;\\n    KeeperRegistryInterface public immutable i_registry;\\n    bytes4 registerSig = KeeperRegistrarInterface.register.selector;\\n\\n    uint256 public gasLimit;\\n\\n    constructor(\\n        address eth_usd_priceFeedAddress,\\n        address mapAddress,\\n        address utilsAddress,\\n        address _linkAddress,\\n        address _registrar,\\n        address _registryAddress,\\n        uint256 _gasLimit,\\n        address trustedForwarder\\n    ) ERC2771Context(trustedForwarder) {\\n        eth_usd_priceFeed = AggregatorV3Interface(eth_usd_priceFeedAddress);\\n        map = IERC721(mapAddress);\\n        utils = IERC1155(utilsAddress);\\n        i_link = LinkTokenInterface(_linkAddress);\\n        registrar = _registrar;\\n        i_registry = KeeperRegistryInterface(_registryAddress);\\n        gasLimit = _gasLimit;\\n    }\\n\\n    function registerAndPredictID(uint256 listingId, uint96 amount) private {\\n        i_link.transferFrom(_msgSender(), address(this), amount);\\n        (State memory state, , ) = i_registry.getState();\\n        uint256 oldNonce = state.nonce;\\n        bytes memory checkData = abi.encodePacked(listingId);\\n        bytes memory payload = abi.encode(\\n            LibString.toString(listingId),\\n            \\\"0x\\\",\\n            address(this),\\n            gasLimit,\\n            address(_msgSender()),\\n            checkData,\\n            amount,\\n            0,\\n            address(this)\\n        );\\n\\n        i_link.transferAndCall(\\n            registrar,\\n            amount,\\n            bytes.concat(registerSig, payload)\\n        );\\n        (state, , ) = i_registry.getState();\\n        uint256 newNonce = state.nonce;\\n        if (newNonce == oldNonce + 1) {\\n            uint256 upkeepID = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        blockhash(block.number - 1),\\n                        address(i_registry),\\n                        uint32(oldNonce)\\n                    )\\n                )\\n            );\\n            // DEV - Use the upkeepID however you see fit\\n            listingToUpkeepID[listingId] = upkeepID;\\n        } else {\\n            revert(\\\"auto-approve disabled\\\");\\n        }\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    ) external view returns (bool upkeepNeeded, bytes memory performData) {\\n        uint256 listingId = abi.decode(checkData, (uint256));\\n\\n        upkeepNeeded =\\n            (block.timestamp >\\n                listings[listingId].timestamp +\\n                    listings[listingId].aucionTime) &&\\n            highestBid[listingId].bidder != address(0) &&\\n            (listings[listingId].isValid || highestBid[listingId].amount > 0);\\n        performData = checkData;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external {\\n        uint256 listingId = abi.decode(performData, (uint256));\\n\\n        calculateWinner(listingId);\\n    }\\n\\n    /*\\n     * @dev If isAuction is true, the price is the minimum bid\\n     * @dev auctionTime is the time in seconds for which the auction will run, so timestamp + auctionTime is the end time\\n     * @dev If isAuction is false, the price is the fixed price and auctionTime is ignored\\n     * @dev For auction, isUSD should be false\\n     * @dev if isAuction is true, the amount is the amount of LINK to be transferred to the upkeep contract else it is ignored\\n     */\\n    function createListing(\\n        bool inUSD,\\n        uint256 tokenId,\\n        uint256 price,\\n        bool isAuction,\\n        uint256 auctionTime,\\n        uint96 amount\\n    ) public {\\n        if (price <= 0) revert InvalidPrice();\\n        if (tokenId <= 0) revert InvalidTokenId();\\n        if (map.ownerOf(tokenId) != _msgSender()) revert NotTokenOwner();\\n        if (isAuction && inUSD) revert USDNotSupportedForAuction();\\n        if (inUSD && address(eth_usd_priceFeed) == address(0))\\n            revert USDNotSupported();\\n        if (isAuction && address(i_link) == address(0))\\n            revert AuctioNotSupported();\\n        listingCount++;\\n        listings[listingCount] = Listing(\\n            _msgSender(),\\n            inUSD,\\n            tokenId,\\n            price,\\n            block.timestamp,\\n            true,\\n            isAuction,\\n            auctionTime\\n        );\\n        if (isAuction) {\\n            registerAndPredictID(listingCount, amount);\\n        }\\n    }\\n\\n    function deleteListing(uint listingId) public {\\n        if (isListingValid(listingId) == false) revert InvalidListing();\\n        if (map.ownerOf(listings[listingId].tokenId) != _msgSender())\\n            revert NotListingOwner();\\n        listings[listingId].isValid = false;\\n    }\\n\\n    function buyListing(uint listingId) public payable {\\n        if (isListingValid(listingId) == false) revert InvalidListing();\\n        if (listings[listingId].isAuction) revert AuctionCantBeBought();\\n        uint price = getPrice(listingId);\\n        if (msg.value < price) revert NotEnoughFunds();\\n        uint excess = msg.value - price;\\n        if (excess > 0) {\\n            balances[_msgSender()] += excess;\\n        }\\n        balances[listings[listingId].seller] += price;\\n        map.safeTransferFrom(\\n            listings[listingId].seller,\\n            _msgSender(),\\n            listings[listingId].tokenId\\n        );\\n        listings[listingId].isValid = false;\\n    }\\n\\n    function bid(uint listingId) public payable {\\n        if (listings[listingId].isValid == false) revert InvalidListing();\\n        if (listings[listingId].isAuction == false) revert NotAuction();\\n        if (msg.value < listings[listingId].price) revert BidNotHighEnough();\\n        if (msg.value <= highestBid[listingId].amount)\\n            revert BidNotHighEnough();\\n        if (highestBid[listingId].amount > 0) {\\n            balances[highestBid[listingId].bidder] += highestBid[listingId]\\n                .amount;\\n            auctionBalance[highestBid[listingId].bidder] -= highestBid[\\n                listingId\\n            ].amount;\\n        }\\n        auctionBalance[_msgSender()] += msg.value;\\n        highestBid[listingId] = Bid(_msgSender(), msg.value);\\n    }\\n\\n    /*\\n     * @dev If the auction is over and the seller is approved for all, the highest bidder will get the token\\n     * @dev If the auction is over and the seller is not approved for all, the highest bidder can withdraw the funds\\n     * @dev If the auction is over and the seller have deleted the listing, the highest bidder can withdraw the funds\\n     */\\n    function calculateWinner(uint listingId) public {\\n        if (listings[listingId].isAuction == false) revert NotAuction();\\n        if (\\n            block.timestamp <=\\n            listings[listingId].timestamp + listings[listingId].aucionTime\\n        ) revert AuctionNotOver();\\n        if (highestBid[listingId].bidder == address(0)) revert NoBids();\\n        if (listings[listingId].isValid == false) {\\n            if (highestBid[listingId].amount > 0) {\\n                _invalidateAuctionBid(listingId);\\n            } else {\\n                revert InvalidListing();\\n            }\\n        }\\n\\n        if (highestBid[listingId].amount <= 0) {\\n            listings[listingId].isValid = false;\\n            return;\\n        }\\n        if (\\n            map.isApprovedForAll(listings[listingId].seller, address(this)) ==\\n            false\\n        ) {\\n            _invalidateAuctionBid(listingId);\\n            listings[listingId].isValid = false;\\n        } else {\\n            if (listings[listingId].isValid == false) revert InvalidListing();\\n            balances[listings[listingId].seller] += highestBid[listingId]\\n                .amount;\\n            // not safe transfer from because calculate winner will be called by automation and it shouldn't revert\\n            map.transferFrom(\\n                listings[listingId].seller,\\n                highestBid[listingId].bidder,\\n                listings[listingId].tokenId\\n            );\\n            listings[listingId].isValid = false;\\n        }\\n    }\\n\\n    /*\\n     * @dev If the auction is over but the seller is not approved for all or seller have deleted the listing, the highest bidder can withdraw the funds\\n     * @dev If the auction is not over but seller have deleted the listing, the highest bidder can withdraw the funds\\n     */\\n    function invalidateAuctionBid(uint listingId) public {\\n        if (listings[listingId].isAuction == false) revert NotAuction();\\n        if (\\n            block.timestamp <=\\n            listings[listingId].timestamp + listings[listingId].aucionTime\\n        ) {\\n            if (listings[listingId].isValid) {\\n                revert ValidListing();\\n            } else {\\n                revert AuctionNotOver();\\n            }\\n        } else {\\n            if (\\n                map.isApprovedForAll(listings[listingId].seller, address(this))\\n            ) {\\n                if (listings[listingId].isValid) {\\n                    revert ValidListing();\\n                }\\n            }\\n        }\\n        if (highestBid[listingId].amount <= 0) revert NotEnoughFunds();\\n        _invalidateAuctionBid(listingId);\\n    }\\n\\n    function _invalidateAuctionBid(uint listingId) private {\\n        auctionBalance[highestBid[listingId].bidder] -= highestBid[listingId]\\n            .amount;\\n        balances[highestBid[listingId].bidder] += highestBid[listingId].amount;\\n        highestBid[listingId].amount = 0;\\n    }\\n\\n    function withdraw() public {\\n        uint amount = balances[_msgSender()];\\n        if (amount <= 0) revert NotEnoughFunds();\\n        balances[_msgSender()] = 0;\\n        payable(_msgSender()).transfer(amount);\\n    }\\n\\n    /*\\n     * @dev Returns the price of a listing in ETH\\n     */\\n    function getPrice(uint listingId) public view returns (uint256) {\\n        if (listingId <= 0 || listingId > listingCount)\\n            revert InvalidListingId();\\n        if (listings[listingId].inUSD) {\\n            uint decimals = eth_usd_priceFeed.decimals();\\n            (\\n                ,\\n                /* uint80 roundID */ int answer /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\n                ,\\n                ,\\n\\n            ) = eth_usd_priceFeed.latestRoundData();\\n            uint256 priceInEth = (listings[listingId].price *\\n                10 ** (decimals)) / uint(answer);\\n            return priceInEth;\\n        } else {\\n            return listings[listingId].price;\\n        }\\n    }\\n\\n    function isListingValid(uint listingId) public view returns (bool) {\\n        if (listingId <= 0 || listingId > listingCount)\\n            revert InvalidListingId();\\n        if (\\n            map.ownerOf(listings[listingId].tokenId) !=\\n            listings[listingId].seller\\n        ) {\\n            return false;\\n        }\\n        return listings[listingId].isValid;\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xcbcde812b700e6730476f343a50bcf2ddfd760b27ed4032b17b89a3e88616cb7\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61012060405260006002556008805463ffffffff1916633659d6661790553480156200002a57600080fd5b50604051620028fd380380620028fd8339810160408190526200004d91620000c0565b6001600160a01b0390811660805296871660a052600080549688166001600160a01b031997881617905560018054958816959096169490941790945590841660c052831660e0529116610100526009556200015f565b80516001600160a01b0381168114620000bb57600080fd5b919050565b600080600080600080600080610100898b031215620000de57600080fd5b620000e989620000a3565b9750620000f960208a01620000a3565b96506200010960408a01620000a3565b95506200011960608a01620000a3565b94506200012960808a01620000a3565b93506200013960a08a01620000a3565b925060c089015191506200015060e08a01620000a3565b90509295985092959890939650565b60805160a05160c05160e0516101005161270c620001f16000396000818161028a015281816118be01528181611a960152611b600152600081816102be01526119e10152600081816103f8015281816110190152818161180501526119b201526000818161019701528181610fc7015281816115c2015261164b01526000818161035801526117c3015261270c6000f3fe6080604052600436106101805760003560e01c80637d253aff116100d1578063d36443ca1161008a578063e6282c6e11610064578063e6282c6e14610612578063e757223014610632578063f23a6e6114610652578063f68016b71461067e57600080fd5b8063d36443ca14610508578063da1086a014610535578063de74e57b1461055557600080fd5b80637d253aff146103e6578063a9b07c261461041a578063a9fbcdc214610430578063b14c63c51461045d578063bc197c81146104bc578063c62fb5c4146104e857600080fd5b80633ccfd60b1161013e5780634884f459116101185780634884f45914610328578063572b6c051461033b5780636e04ff0d1461039857806373253387146103c657600080fd5b80633ccfd60b146102e0578063454a2ab3146102f55780634585e33b1461030857600080fd5b8062a18f9514610185578063150b7a02146101d657806325cbce1c1461021b57806327e235e31461023d5780632a663606146102785780632b20e397146102ac575b600080fd5b34801561019157600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101e257600080fd5b506102026101f1366004611cb8565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101cd565b34801561022757600080fd5b5061023b610236366004611d2b565b610694565b005b34801561024957600080fd5b5061026a610258366004611d44565b60046020526000908152604090205481565b6040519081526020016101cd565b34801561028457600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b857600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ec57600080fd5b5061023b610839565b61023b610303366004611d2b565b6108f7565b34801561031457600080fd5b5061023b610323366004611d68565b610afb565b61023b610336366004611d2b565b610b19565b34801561034757600080fd5b50610388610356366004611d44565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016101cd565b3480156103a457600080fd5b506103b86103b3366004611d68565b610cfd565b6040516101cd929190611e06565b3480156103d257600080fd5b506103886103e1366004611d2b565b610dd2565b3480156103f257600080fd5b506101b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561042657600080fd5b5061026a60025481565b34801561043c57600080fd5b5061026a61044b366004611d2b565b60076020526000908152604090205481565b34801561046957600080fd5b5061049d610478366004611d2b565b600560205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152016101cd565b3480156104c857600080fd5b506102026104d7366004611fbc565b63bc197c8160e01b95945050505050565b3480156104f457600080fd5b5061023b61050336600461208d565b610eb4565b34801561051457600080fd5b5061026a610523366004611d44565b60066020526000908152604090205481565b34801561054157600080fd5b5061023b610550366004611d2b565b611188565b34801561056157600080fd5b506105c9610570366004611d2b565b60036020819052600091825260409091208054600182015460028301549383015460048401546005909401546001600160a01b0384169560ff600160a01b90950485169593949093808216926101009091049091169088565b604080516001600160a01b03909916895296151560208901529587019490945260608601929092526080850152151560a0840152151560c083015260e0820152610100016101cd565b34801561061e57600080fd5b5061023b61062d366004611d2b565b611496565b34801561063e57600080fd5b5061026a61064d366004611d2b565b611572565b34801561065e57600080fd5b5061020261066d3660046120f4565b63f23a6e6160e01b95945050505050565b34801561068a57600080fd5b5061026a60095481565b600081815260036020526040812060040154610100900460ff16151590036106cf57604051633fbfe96d60e01b815260040160405180910390fd5b600081815260036020819052604090912060058101549101546106f29190612173565b42116107445760008181526003602052604090206004015460ff161561072b576040516312a83adf60e01b815260040160405180910390fd5b60405163058ebc1760e11b815260040160405180910390fd5b60008054828252600360205260409182902054915163e985e9c560e01b81526001600160a01b03928316600482015230602482015291169063e985e9c590604401602060405180830381865afa1580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c6919061218b565b156107fe5760008181526003602052604090206004015460ff16156107fe576040516312a83adf60e01b815260040160405180910390fd5b60008181526005602052604090206001015461082d57604051631036b5ad60e31b815260040160405180910390fd5b6108368161172b565b50565b6000600460006108476117bf565b6001600160a01b03166001600160a01b031681526020019081526020016000205490506000811161088b57604051631036b5ad60e31b815260040160405180910390fd5b6000600460006108996117bf565b6001600160a01b031681526020810191909152604001600020556108bb6117bf565b6001600160a01b03166108fc829081150290604051600060405180830381858888f193505050501580156108f3573d6000803e3d6000fd5b5050565b60008181526003602052604081206004015460ff161515900361092d57604051631ab4dc1760e31b815260040160405180910390fd5b600081815260036020526040812060040154610100900460ff161515900361096857604051633fbfe96d60e01b815260040160405180910390fd5b60008181526003602052604090206002015434101561099a57604051633bdb1be760e01b815260040160405180910390fd5b60008181526005602052604090206001015434116109cb57604051633bdb1be760e01b815260040160405180910390fd5b60008181526005602052604090206001015415610a63576000818152600560209081526040808320600181015490546001600160a01b0316845260049092528220805491929091610a1d908490612173565b90915550506000818152600560209081526040808320600181015490546001600160a01b0316845260069092528220805491929091610a5d9084906121a8565b90915550505b3460066000610a706117bf565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610a9f9190612173565b925050819055506040518060400160405280610ab96117bf565b6001600160a01b039081168252346020928301526000938452600582526040909320825181546001600160a01b03191694169390931783550151600190910155565b6000610b0982840184611d2b565b9050610b1481611188565b505050565b610b2281610dd2565b1515600003610b4457604051631ab4dc1760e31b815260040160405180910390fd5b600081815260036020526040902060040154610100900460ff1615610b7c576040516306fd349d60e31b815260040160405180910390fd5b6000610b8782611572565b905080341015610baa57604051631036b5ad60e31b815260040160405180910390fd5b6000610bb682346121a8565b90508015610c00578060046000610bcb6117bf565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610bfa9190612173565b90915550505b6000838152600360209081526040808320546001600160a01b03168352600490915281208054849290610c34908490612173565b90915550506000805484825260036020526040909120546001600160a01b03918216916342842e0e9116610c666117bf565b6000878152600360205260409081902060010154905160e085901b6001600160e01b03191681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610cc857600080fd5b505af1158015610cdc573d6000803e3d6000fd5b5050506000938452505060036020525060409020600401805460ff19169055565b6000606081610d0e84860186611d2b565b60008181526003602081905260409091206005810154910154919250610d3391612173565b42118015610d5757506000818152600560205260409020546001600160a01b031615155b8015610d8e575060008181526003602052604090206004015460ff1680610d8e575060008181526005602052604090206001015415155b925084848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525095989297509195505050505050565b6000811580610de2575060025482115b15610e0057604051632d36379960e11b815260040160405180910390fd5b6000828152600360205260408082208054925460019091015491516331a9108f60e11b815260048101929092526001600160a01b03928316921690636352211e90602401602060405180830381865afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8591906121ca565b6001600160a01b031614610e9b57506000919050565b5060009081526003602052604090206004015460ff1690565b60008411610ed45760405162bfc92160e01b815260040160405180910390fd5b60008511610ef5576040516307ed98ed60e31b815260040160405180910390fd5b610efd6117bf565b6000546040516331a9108f60e11b8152600481018890526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6e91906121ca565b6001600160a01b031614610f95576040516359dc379f60e01b815260040160405180910390fd5b828015610f9f5750855b15610fbd576040516323dab71360e01b815260040160405180910390fd5b858015610ff157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316155b1561100f57604051630f99819560e01b815260040160405180910390fd5b82801561104357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316155b1561106157604051632e3abd1160e11b815260040160405180910390fd5b60028054906000611071836121e7565b919050555060405180610100016040528061108a6117bf565b6001600160a01b03908116825288151560208084019190915260408084018a905260608085018a905242608080870191909152600160a08088018290528b15801560c0808b019190915260e0998a018d90526002805460009081526003808b52908990208d5181549b8f01511515600160a01b026001600160a81b0319909c169c169b909b17999099178a55968b01519389019390935593890151948701949094559087015193850193909355908501516004840180549387015115156101000261ff00199215159290921661ffff19909416939093171790915592909101516005909101556111805761118060025482611803565b505050505050565b600081815260036020526040812060040154610100900460ff16151590036111c357604051633fbfe96d60e01b815260040160405180910390fd5b600081815260036020819052604090912060058101549101546111e69190612173565b42116112055760405163058ebc1760e11b815260040160405180910390fd5b6000818152600560205260409020546001600160a01b031661123a5760405163c3bc404360e01b815260040160405180910390fd5b60008181526003602052604081206004015460ff1615159003611295576000818152600560205260409020600101541561127c576112778161172b565b611295565b604051631ab4dc1760e31b815260040160405180910390fd5b6000818152600560205260409020600101546112c6576000908152600360205260409020600401805460ff19169055565b60008054828252600360205260409182902054915163e985e9c560e01b81526001600160a01b03928316600482015230602482015291169063e985e9c590604401602060405180830381865afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611348919061218b565b15156000036113755761135a8161172b565b6000908152600360205260409020600401805460ff19169055565b60008181526003602052604081206004015460ff16151590036113ab57604051631ab4dc1760e31b815260040160405180910390fd5b60008181526005602090815260408083206001015460038352818420546001600160a01b03168452600490925282208054919290916113eb908490612173565b90915550506000805482825260036020818152604080852080546005845282872054949093526001015481516323b872dd60e01b81526001600160a01b03938416600482015293831660248501526044840152519216926323b872dd9260648084019382900301818387803b15801561146357600080fd5b505af1158015611477573d6000803e3d6000fd5b505050600091825250600360205260409020600401805460ff19169055565b61149f81610dd2565b15156000036114c157604051631ab4dc1760e31b815260040160405180910390fd5b6114c96117bf565b6000805483825260036020526040918290206001015491516331a9108f60e11b815260048101929092526001600160a01b03928316921690636352211e90602401602060405180830381865afa158015611527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154b91906121ca565b6001600160a01b03161461135a57604051637c62d69f60e01b815260040160405180910390fd5b6000811580611582575060025482115b156115a057604051632d36379960e11b815260040160405180910390fd5b600082815260036020526040902054600160a01b900460ff16156117105760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561161e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116429190612200565b60ff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb919061223d565b50505091505060008183600a6116e19190612373565b6000878152600360205260409020600201546116fd919061237f565b611707919061239e565b95945050505050565b5060009081526003602052604090206002015490565b919050565b6000818152600560209081526040808320600181015490546001600160a01b03168452600690925282208054919290916117669084906121a8565b90915550506000818152600560209081526040808320600181015490546001600160a01b03168452600490925282208054919290916117a6908490612173565b9091555050600090815260056020526040812060010155565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036117fe575060131936013560601c90565b503390565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd61183a6117bf565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201523060248201526001600160601b03841660448201526064016020604051808303816000875af1158015611895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b9919061218b565b5060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561191a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119429190810190612468565b505080516040805160208082018890528251808303909101815290820190915291925063ffffffff1690600061197786611c16565b306009546119836117bf565b858960003060405160200161199f9897969594939291906125e0565b60405160208183030381529060405290507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634000aea07f000000000000000000000000000000000000000000000000000000000000000087600860009054906101000a900460e01b85604051602001611a23929190612672565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611a50939291906126a3565b6020604051808303816000875af1158015611a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a93919061218b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631865c57d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611af2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b1a9190810190612468565b5050805190945063ffffffff16611b32846001612173565b8103611bc9576000611b456001436121a8565b60408051914060208301526bffffffffffffffffffffffff197f000000000000000000000000000000000000000000000000000000000000000060601b16908201526001600160e01b031960e087901b16605482015260580160408051601f19818403018152918152815160209283012060008b8152600790935291205550611c0d565b60405162461bcd60e51b8152602060048201526015602482015274185d5d1bcb585c1c1c9bdd9948191a5cd8589b1959605a1b604482015260640160405180910390fd5b50505050505050565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480611c305750819003601f19909101908152919050565b6001600160a01b038116811461083657600080fd5b60008083601f840112611c8157600080fd5b50813567ffffffffffffffff811115611c9957600080fd5b602083019150836020828501011115611cb157600080fd5b9250929050565b600080600080600060808688031215611cd057600080fd5b8535611cdb81611c5a565b94506020860135611ceb81611c5a565b935060408601359250606086013567ffffffffffffffff811115611d0e57600080fd5b611d1a88828901611c6f565b969995985093965092949392505050565b600060208284031215611d3d57600080fd5b5035919050565b600060208284031215611d5657600080fd5b8135611d6181611c5a565b9392505050565b60008060208385031215611d7b57600080fd5b823567ffffffffffffffff811115611d9257600080fd5b611d9e85828601611c6f565b90969095509350505050565b60005b83811015611dc5578181015183820152602001611dad565b83811115611dd4576000848401525b50505050565b60008151808452611df2816020860160208601611daa565b601f01601f19169290920160200192915050565b8215158152604060208201526000611e216040830184611dda565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff81118282101715611e6257611e62611e29565b60405290565b604051610180810167ffffffffffffffff81118282101715611e6257611e62611e29565b604051601f8201601f1916810167ffffffffffffffff81118282101715611eb557611eb5611e29565b604052919050565b600067ffffffffffffffff821115611ed757611ed7611e29565b5060051b60200190565b600082601f830112611ef257600080fd5b81356020611f07611f0283611ebd565b611e8c565b82815260059290921b84018101918181019086841115611f2657600080fd5b8286015b84811015611f415780358352918301918301611f2a565b509695505050505050565b600082601f830112611f5d57600080fd5b813567ffffffffffffffff811115611f7757611f77611e29565b611f8a601f8201601f1916602001611e8c565b818152846020838601011115611f9f57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611fd457600080fd5b8535611fdf81611c5a565b94506020860135611fef81611c5a565b9350604086013567ffffffffffffffff8082111561200c57600080fd5b61201889838a01611ee1565b9450606088013591508082111561202e57600080fd5b61203a89838a01611ee1565b9350608088013591508082111561205057600080fd5b5061205d88828901611f4c565b9150509295509295909350565b801515811461083657600080fd5b6001600160601b038116811461083657600080fd5b60008060008060008060c087890312156120a657600080fd5b86356120b18161206a565b9550602087013594506040870135935060608701356120cf8161206a565b92506080870135915060a08701356120e681612078565b809150509295509295509295565b600080600080600060a0868803121561210c57600080fd5b853561211781611c5a565b9450602086013561212781611c5a565b93506040860135925060608601359150608086013567ffffffffffffffff81111561215157600080fd5b61205d88828901611f4c565b634e487b7160e01b600052601160045260246000fd5b600082198211156121865761218661215d565b500190565b60006020828403121561219d57600080fd5b8151611d618161206a565b6000828210156121ba576121ba61215d565b500390565b805161172681611c5a565b6000602082840312156121dc57600080fd5b8151611d6181611c5a565b6000600182016121f9576121f961215d565b5060010190565b60006020828403121561221257600080fd5b815160ff81168114611d6157600080fd5b805169ffffffffffffffffffff8116811461172657600080fd5b600080600080600060a0868803121561225557600080fd5b61225e86612223565b945060208601519350604086015192506060860151915061228160808701612223565b90509295509295909350565b600181815b808511156122c85781600019048211156122ae576122ae61215d565b808516156122bb57918102915b93841c9390800290612292565b509250929050565b6000826122df5750600161236d565b816122ec5750600061236d565b8160018114612302576002811461230c57612328565b600191505061236d565b60ff84111561231d5761231d61215d565b50506001821b61236d565b5060208310610133831016604e8410600b841016171561234b575081810a61236d565b612355838361228d565b80600019048211156123695761236961215d565b0290505b92915050565b6000611d6183836122d0565b60008160001904831182151516156123995761239961215d565b500290565b6000826123bb57634e487b7160e01b600052601260045260246000fd5b500490565b805163ffffffff8116811461172657600080fd5b805161172681612078565b805162ffffff8116811461172657600080fd5b805161ffff8116811461172657600080fd5b600082601f83011261241557600080fd5b81516020612425611f0283611ebd565b82815260059290921b8401810191818101908684111561244457600080fd5b8286015b84811015611f4157805161245b81611c5a565b8352918301918301612448565b600080600083850361022081121561247f57600080fd5b608081121561248d57600080fd5b612495611e3f565b61249e866123c0565b815260208601516124ae81612078565b602082015260408681015190820152606080870151908201529350610180607f1982018113156124dd57600080fd5b6124e5611e68565b91506124f3608087016123c0565b825261250160a087016123c0565b602083015261251260c087016123df565b604083015261252360e087016123c0565b60608301526101006125368188016123df565b60808401526101206125498189016123f2565b60a085015261014061255c818a016123d4565b60c086015261016061256f818b016123c0565b60e0870152848a0151848701526101a08a0151838701526125936101c08b016121bf565b828701526125a46101e08b016121bf565b908601525050505061020085015190925067ffffffffffffffff8111156125ca57600080fd5b6125d686828701612404565b9150509250925092565b60006101208083526125f48184018c611dda565b90508281038060208501526002825261060f60f31b602083015260018060a01b03808c1660408601528a6060860152808a1660808601526040820160a0860152612641604084018a611dda565b6001600160601b039890981660c086015260ff9690961660e085015250505091166101009091015295945050505050565b6001600160e01b0319831681528151600090612695816004850160208701611daa565b919091016004019392505050565b6001600160a01b03841681526001600160601b038316602082015260606040820181905260009061170790830184611dda56fea26469706673582212207f16c447d152c4f1881e4545aef196ef57479d9f6ce62dcb80d392ece4bb2ba464736f6c634300080d0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7775,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "map",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC721)3004"
      },
      {
        "astId": 7778,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "utils",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC1155)1905"
      },
      {
        "astId": 7781,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "listingCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7786,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "listings",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Listing)7764_storage)"
      },
      {
        "astId": 7790,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7795,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "highestBid",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Bid)7769_storage)"
      },
      {
        "astId": 7799,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "auctionBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7803,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "listingToUpkeepID",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7816,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "registerSig",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes4"
      },
      {
        "astId": 7818,
        "contract": "src/Marketplace.sol:Marketplace",
        "label": "gasLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IERC1155)1905": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)3004": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Bid)7769_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)7769_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)7764_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Marketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)7764_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bid)7769_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Bid",
        "members": [
          {
            "astId": 7766,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7768,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Listing)7764_storage": {
        "encoding": "inplace",
        "label": "struct Marketplace.Listing",
        "members": [
          {
            "astId": 7749,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7751,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "inUSD",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7753,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7755,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7757,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7759,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "isValid",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 7761,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "isAuction",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 7763,
            "contract": "src/Marketplace.sol:Marketplace",
            "label": "aucionTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}